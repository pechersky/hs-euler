module Euler.P040.Problem045
  ( prob045
  )
  where

{-
 - Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 -
 - Triangle    Tn=n(n+1)/2   1, 3, 6, 10, 15, ...
 - Pentagonal  Pn=n(3n−1)/2  1, 5, 12, 22, 35, ...
 - Hexagonal   Hn=n(2n−1)    1, 6, 15, 28, 45, ...
 - It can be verified that T285 = P165 = H143 = 40755.
 -
 - Find the next triangle number that is also pentagonal and hexagonal.
 -}

import Data.Maybe            (isJust)
import Euler.P000.Problem009 (toInt)

prob045 :: Integer
prob045 = prob045' 2

-- naive method

prob045' :: Integer -> Integer
prob045' (fromIntegral->n) = (!! n) . filter (all isJust . sequence [fromPentagonal, fromHexagonal]) $ scanl1 (+) [1..]

fromTriangle :: Integer -> Maybe Int
fromTriangle x = toInt ((sqrt (8 * (fromIntegral x :: Double) + 1) - 1) / 2)
fromPentagonal :: Integer -> Maybe Int
fromPentagonal x = toInt ((sqrt (24 * (fromIntegral x :: Double) + 1) + 1) / 6)
fromHexagonal :: Integer -> Maybe Int
fromHexagonal x = toInt ((sqrt (8 * (fromIntegral x :: Double) + 1) + 1) / 4)
